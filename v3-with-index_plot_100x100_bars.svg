<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="14356"><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;(egui::data::output::Output,alloc::vec::Vec&lt;epaint::ClippedShape&gt;)&gt; (172 samples, 1.20%)</title><rect x="0.0209%" y="261" width="1.1981%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="172"/><text x="0.2709%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;epaint::shape::Shape&gt; (153 samples, 1.07%)</title><rect x="0.1532%" y="245" width="1.0658%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="153"/><text x="0.4032%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;epaint::shape::Shape&gt; (30 samples, 0.21%)</title><rect x="1.2190%" y="261" width="0.2090%" height="15" fill="rgb(221,193,54)" fg:x="175" fg:w="30"/><text x="1.4690%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="1.4280%" y="229" width="0.0139%" height="15" fill="rgb(248,212,6)" fg:x="205" fg:w="2"/><text x="1.6780%" y="239.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::find_closest_element (1,008 samples, 7.02%)</title><rect x="2.8351%" y="213" width="7.0215%" height="15" fill="rgb(208,68,35)" fg:x="407" fg:w="1008"/><text x="3.0851%" y="223.50">benchmark..</text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (291 samples, 2.03%)</title><rect x="7.8295%" y="197" width="2.0270%" height="15" fill="rgb(232,128,0)" fg:x="1124" fg:w="291"/><text x="8.0795%" y="207.50">b..</text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::get_bounds (212 samples, 1.48%)</title><rect x="9.8565%" y="213" width="1.4767%" height="15" fill="rgb(207,160,47)" fg:x="1415" fg:w="212"/><text x="10.1065%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$memmove (10 samples, 0.07%)</title><rect x="11.5770%" y="197" width="0.0697%" height="15" fill="rgb(228,23,34)" fg:x="1662" fg:w="10"/><text x="11.8270%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_try_realloc_in_place (2 samples, 0.01%)</title><rect x="16.7526%" y="101" width="0.0139%" height="15" fill="rgb(218,30,26)" fg:x="2405" fg:w="2"/><text x="17.0026%" y="111.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="16.7317%" y="165" width="0.0557%" height="15" fill="rgb(220,122,19)" fg:x="2402" fg:w="8"/><text x="16.9817%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.06%)</title><rect x="16.7317%" y="149" width="0.0557%" height="15" fill="rgb(250,228,42)" fg:x="2402" fg:w="8"/><text x="16.9817%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.05%)</title><rect x="16.7386%" y="133" width="0.0488%" height="15" fill="rgb(240,193,28)" fg:x="2403" fg:w="7"/><text x="16.9886%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.04%)</title><rect x="16.7456%" y="117" width="0.0418%" height="15" fill="rgb(216,20,37)" fg:x="2404" fg:w="6"/><text x="16.9956%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="16.7665%" y="101" width="0.0209%" height="15" fill="rgb(206,188,39)" fg:x="2407" fg:w="3"/><text x="17.0165%" y="111.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.06%)</title><rect x="16.7317%" y="181" width="0.0627%" height="15" fill="rgb(217,207,13)" fg:x="2402" fg:w="9"/><text x="16.9817%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (277 samples, 1.93%)</title><rect x="16.7944%" y="181" width="1.9295%" height="15" fill="rgb(231,73,38)" fg:x="2411" fg:w="277"/><text x="17.0444%" y="191.50">b..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::shapes (1,329 samples, 9.26%)</title><rect x="11.6467%" y="197" width="9.2575%" height="15" fill="rgb(225,20,46)" fg:x="1672" fg:w="1329"/><text x="11.8967%" y="207.50">benchmark-022..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (313 samples, 2.18%)</title><rect x="18.7239%" y="181" width="2.1803%" height="15" fill="rgb(210,31,41)" fg:x="2688" fg:w="313"/><text x="18.9739%" y="191.50">l..</text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (30 samples, 0.21%)</title><rect x="20.9042%" y="197" width="0.2090%" height="15" fill="rgb(221,200,47)" fg:x="3001" fg:w="30"/><text x="21.1542%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::get_shapes (1,445 samples, 10.07%)</title><rect x="11.3332%" y="213" width="10.0655%" height="15" fill="rgb(226,26,5)" fg:x="1627" fg:w="1445"/><text x="11.5832%" y="223.50">benchmark-022a9..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (41 samples, 0.29%)</title><rect x="21.1131%" y="197" width="0.2856%" height="15" fill="rgb(249,33,26)" fg:x="3031" fg:w="41"/><text x="21.3631%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::highlighted (2 samples, 0.01%)</title><rect x="21.3987%" y="213" width="0.0139%" height="15" fill="rgb(235,183,28)" fg:x="3072" fg:w="2"/><text x="21.6487%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Color32 as core::convert::From&lt;epaint::color::Rgba&gt;&gt;::from (159 samples, 1.11%)</title><rect x="21.4196%" y="213" width="1.1076%" height="15" fill="rgb(221,5,38)" fg:x="3075" fg:w="159"/><text x="21.6696%" y="223.50"></text></g><g><title>libsystem_m.dylib`roundf (9 samples, 0.06%)</title><rect x="22.4645%" y="197" width="0.0627%" height="15" fill="rgb(247,18,42)" fg:x="3225" fg:w="9"/><text x="22.7145%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$roundf (10 samples, 0.07%)</title><rect x="22.5341%" y="213" width="0.0697%" height="15" fill="rgb(241,131,45)" fg:x="3235" fg:w="10"/><text x="22.7841%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="22.6595%" y="149" width="0.0209%" height="15" fill="rgb(249,31,29)" fg:x="3253" fg:w="3"/><text x="22.9095%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.07%)</title><rect x="22.6247%" y="213" width="0.0697%" height="15" fill="rgb(225,111,53)" fg:x="3248" fg:w="10"/><text x="22.8747%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (9 samples, 0.06%)</title><rect x="22.6317%" y="197" width="0.0627%" height="15" fill="rgb(238,160,17)" fg:x="3249" fg:w="9"/><text x="22.8817%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.06%)</title><rect x="22.6386%" y="181" width="0.0557%" height="15" fill="rgb(214,148,48)" fg:x="3250" fg:w="8"/><text x="22.8886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.06%)</title><rect x="22.6386%" y="165" width="0.0557%" height="15" fill="rgb(232,36,49)" fg:x="3250" fg:w="8"/><text x="22.8886%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="22.6804%" y="149" width="0.0139%" height="15" fill="rgb(209,103,24)" fg:x="3256" fg:w="2"/><text x="22.9304%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::slice::merge_sort (5 samples, 0.03%)</title><rect x="22.6943%" y="213" width="0.0348%" height="15" fill="rgb(229,88,8)" fg:x="3258" fg:w="5"/><text x="22.9443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="22.7152%" y="197" width="0.0139%" height="15" fill="rgb(213,181,19)" fg:x="3261" fg:w="2"/><text x="22.9652%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.01%)</title><rect x="22.7152%" y="181" width="0.0139%" height="15" fill="rgb(254,191,54)" fg:x="3261" fg:w="2"/><text x="22.9652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="22.7152%" y="165" width="0.0139%" height="15" fill="rgb(241,83,37)" fg:x="3261" fg:w="2"/><text x="22.9652%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="22.7152%" y="149" width="0.0139%" height="15" fill="rgb(233,36,39)" fg:x="3261" fg:w="2"/><text x="22.9652%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::vec::Vec&lt;T,A&gt;::retain (6 samples, 0.04%)</title><rect x="22.7292%" y="213" width="0.0418%" height="15" fill="rgb(226,3,54)" fg:x="3263" fg:w="6"/><text x="22.9792%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 0.04%)</title><rect x="22.7292%" y="197" width="0.0418%" height="15" fill="rgb(245,192,40)" fg:x="3263" fg:w="6"/><text x="22.9792%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="22.7570%" y="181" width="0.0139%" height="15" fill="rgb(238,167,29)" fg:x="3267" fg:w="2"/><text x="23.0070%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::pad_formatted_parts (2 samples, 0.01%)</title><rect x="22.8894%" y="181" width="0.0139%" height="15" fill="rgb(232,182,51)" fg:x="3286" fg:w="2"/><text x="23.1394%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (42 samples, 0.29%)</title><rect x="23.0008%" y="133" width="0.2926%" height="15" fill="rgb(231,60,39)" fg:x="3302" fg:w="42"/><text x="23.2508%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (40 samples, 0.28%)</title><rect x="23.0148%" y="117" width="0.2786%" height="15" fill="rgb(208,69,12)" fg:x="3304" fg:w="40"/><text x="23.2648%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (38 samples, 0.26%)</title><rect x="23.0287%" y="101" width="0.2647%" height="15" fill="rgb(235,93,37)" fg:x="3306" fg:w="38"/><text x="23.2787%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.25%)</title><rect x="23.0426%" y="85" width="0.2508%" height="15" fill="rgb(213,116,39)" fg:x="3308" fg:w="36"/><text x="23.2926%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.22%)</title><rect x="23.0705%" y="69" width="0.2229%" height="15" fill="rgb(222,207,29)" fg:x="3312" fg:w="32"/><text x="23.3205%" y="79.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.32%)</title><rect x="22.9799%" y="149" width="0.3204%" height="15" fill="rgb(206,96,30)" fg:x="3299" fg:w="46"/><text x="23.2299%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (53 samples, 0.37%)</title><rect x="22.9451%" y="165" width="0.3692%" height="15" fill="rgb(218,138,4)" fg:x="3294" fg:w="53"/><text x="23.1951%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="23.3004%" y="149" width="0.0139%" height="15" fill="rgb(250,191,14)" fg:x="3345" fg:w="2"/><text x="23.5504%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::write_formatted_parts (60 samples, 0.42%)</title><rect x="22.9033%" y="181" width="0.4179%" height="15" fill="rgb(239,60,40)" fg:x="3288" fg:w="60"/><text x="23.1533%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::float::float_to_decimal_common_shortest (128 samples, 0.89%)</title><rect x="22.7988%" y="197" width="0.8916%" height="15" fill="rgb(206,27,48)" fg:x="3273" fg:w="128"/><text x="23.0488%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::num::flt2dec::strategy::grisu::format_shortest_opt (53 samples, 0.37%)</title><rect x="23.3213%" y="181" width="0.3692%" height="15" fill="rgb(225,35,8)" fg:x="3348" fg:w="53"/><text x="23.5713%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::write (133 samples, 0.93%)</title><rect x="22.7710%" y="213" width="0.9264%" height="15" fill="rgb(250,213,24)" fg:x="3269" fg:w="133"/><text x="23.0210%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="24.3034%" y="181" width="0.0209%" height="15" fill="rgb(247,123,22)" fg:x="3489" fg:w="3"/><text x="24.5534%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.05%)</title><rect x="24.4009%" y="165" width="0.0488%" height="15" fill="rgb(231,138,38)" fg:x="3503" fg:w="7"/><text x="24.6509%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;egui::widgets::plot::items::BarChart&gt; (112 samples, 0.78%)</title><rect x="23.7113%" y="197" width="0.7802%" height="15" fill="rgb(231,145,46)" fg:x="3404" fg:w="112"/><text x="23.9613%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.17%)</title><rect x="24.3243%" y="181" width="0.1672%" height="15" fill="rgb(251,118,11)" fg:x="3492" fg:w="24"/><text x="24.5743%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.04%)</title><rect x="24.4497%" y="165" width="0.0418%" height="15" fill="rgb(217,147,25)" fg:x="3510" fg:w="6"/><text x="24.6997%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.04%)</title><rect x="24.4915%" y="197" width="0.0418%" height="15" fill="rgb(247,81,37)" fg:x="3516" fg:w="6"/><text x="24.7415%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="24.5194%" y="181" width="0.0139%" height="15" fill="rgb(209,12,38)" fg:x="3520" fg:w="2"/><text x="24.7694%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="24.5194%" y="165" width="0.0139%" height="15" fill="rgb(227,1,9)" fg:x="3520" fg:w="2"/><text x="24.7694%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 0.15%)</title><rect x="24.5333%" y="197" width="0.1532%" height="15" fill="rgb(248,47,43)" fg:x="3522" fg:w="22"/><text x="24.7833%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.12%)</title><rect x="24.5681%" y="181" width="0.1184%" height="15" fill="rgb(221,10,30)" fg:x="3527" fg:w="17"/><text x="24.8181%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.05%)</title><rect x="24.6378%" y="165" width="0.0488%" height="15" fill="rgb(210,229,1)" fg:x="3537" fg:w="7"/><text x="24.8878%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;egui::widgets::plot::Prepared&gt; (143 samples, 1.00%)</title><rect x="23.6974%" y="213" width="0.9961%" height="15" fill="rgb(222,148,37)" fg:x="3402" fg:w="143"/><text x="23.9474%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,072 samples, 7.47%)</title><rect x="24.7074%" y="181" width="7.4673%" height="15" fill="rgb(234,67,33)" fg:x="3547" fg:w="1072"/><text x="24.9574%" y="191.50">benchmark-..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::painter::Painter::extend (1,079 samples, 7.52%)</title><rect x="24.7005%" y="213" width="7.5160%" height="15" fill="rgb(247,98,35)" fg:x="3546" fg:w="1079"/><text x="24.9505%" y="223.50">benchmark-..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::layers::PaintList::extend (1,078 samples, 7.51%)</title><rect x="24.7074%" y="197" width="7.5091%" height="15" fill="rgb(247,138,52)" fg:x="3547" fg:w="1078"/><text x="24.9574%" y="207.50">benchmark-..</text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.04%)</title><rect x="32.1747%" y="181" width="0.0418%" height="15" fill="rgb(213,79,30)" fg:x="4619" fg:w="6"/><text x="32.4247%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.03%)</title><rect x="32.1886%" y="165" width="0.0279%" height="15" fill="rgb(246,177,23)" fg:x="4621" fg:w="4"/><text x="32.4386%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::Context::layer_id_at (4 samples, 0.03%)</title><rect x="32.2235%" y="181" width="0.0279%" height="15" fill="rgb(230,62,27)" fg:x="4626" fg:w="4"/><text x="32.4735%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::memory::Memory::layer_id_at (3 samples, 0.02%)</title><rect x="32.2304%" y="165" width="0.0209%" height="15" fill="rgb(216,154,8)" fg:x="4627" fg:w="3"/><text x="32.4804%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::map::make_hash (3 samples, 0.02%)</title><rect x="32.2304%" y="149" width="0.0209%" height="15" fill="rgb(244,35,45)" fg:x="4627" fg:w="3"/><text x="32.4804%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::CtxRef::interact (5 samples, 0.03%)</title><rect x="32.2235%" y="197" width="0.0348%" height="15" fill="rgb(251,115,12)" fg:x="4626" fg:w="5"/><text x="32.4735%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::ui::Ui::allocate_exact_size (7 samples, 0.05%)</title><rect x="32.2165%" y="213" width="0.0488%" height="15" fill="rgb(240,54,50)" fg:x="4625" fg:w="7"/><text x="32.4665%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::shapes (18 samples, 0.13%)</title><rect x="32.2653%" y="213" width="0.1254%" height="15" fill="rgb(233,84,52)" fg:x="4632" fg:w="18"/><text x="32.5153%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="32.3906%" y="69" width="0.0139%" height="15" fill="rgb(207,117,47)" fg:x="4650" fg:w="2"/><text x="32.6406%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="32.3906%" y="53" width="0.0139%" height="15" fill="rgb(249,43,39)" fg:x="4650" fg:w="2"/><text x="32.6406%" y="63.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="32.3906%" y="101" width="0.0209%" height="15" fill="rgb(209,38,44)" fg:x="4650" fg:w="3"/><text x="32.6406%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.02%)</title><rect x="32.3906%" y="85" width="0.0209%" height="15" fill="rgb(236,212,23)" fg:x="4650" fg:w="3"/><text x="32.6406%" y="95.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::write_formatted_parts (4 samples, 0.03%)</title><rect x="32.3906%" y="149" width="0.0279%" height="15" fill="rgb(242,79,21)" fg:x="4650" fg:w="4"/><text x="32.6406%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.03%)</title><rect x="32.3906%" y="133" width="0.0279%" height="15" fill="rgb(211,96,35)" fg:x="4650" fg:w="4"/><text x="32.6406%" y="143.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="32.3906%" y="117" width="0.0279%" height="15" fill="rgb(253,215,40)" fg:x="4650" fg:w="4"/><text x="32.6406%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::fmt::format (5 samples, 0.03%)</title><rect x="32.3906%" y="197" width="0.0348%" height="15" fill="rgb(211,81,21)" fg:x="4650" fg:w="5"/><text x="32.6406%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::write (5 samples, 0.03%)</title><rect x="32.3906%" y="181" width="0.0348%" height="15" fill="rgb(208,190,38)" fg:x="4650" fg:w="5"/><text x="32.6406%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::float::float_to_decimal_common_exact (5 samples, 0.03%)</title><rect x="32.3906%" y="165" width="0.0348%" height="15" fill="rgb(235,213,38)" fg:x="4650" fg:w="5"/><text x="32.6406%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.01%)</title><rect x="32.4464%" y="133" width="0.0139%" height="15" fill="rgb(237,122,38)" fg:x="4658" fg:w="2"/><text x="32.6964%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="32.4464%" y="117" width="0.0139%" height="15" fill="rgb(244,218,35)" fg:x="4658" fg:w="2"/><text x="32.6964%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::Fonts::layout_multiline (3 samples, 0.02%)</title><rect x="32.4464%" y="181" width="0.0209%" height="15" fill="rgb(240,68,47)" fg:x="4658" fg:w="3"/><text x="32.6964%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::Fonts::layout_multiline_with_indentation_and_max_width (3 samples, 0.02%)</title><rect x="32.4464%" y="165" width="0.0209%" height="15" fill="rgb(210,16,53)" fg:x="4658" fg:w="3"/><text x="32.6964%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::GalleyCache::layout (3 samples, 0.02%)</title><rect x="32.4464%" y="149" width="0.0209%" height="15" fill="rgb(235,124,12)" fg:x="4658" fg:w="3"/><text x="32.6964%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::shape::Shape::text (6 samples, 0.04%)</title><rect x="32.4324%" y="197" width="0.0418%" height="15" fill="rgb(224,169,11)" fg:x="4656" fg:w="6"/><text x="32.6824%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::rulers_at_value (13 samples, 0.09%)</title><rect x="32.3906%" y="213" width="0.0906%" height="15" fill="rgb(250,166,2)" fg:x="4650" fg:w="13"/><text x="32.6406%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (29 samples, 0.20%)</title><rect x="32.4812%" y="213" width="0.2020%" height="15" fill="rgb(242,216,29)" fg:x="4663" fg:w="29"/><text x="32.7312%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (2 samples, 0.01%)</title><rect x="32.7111%" y="197" width="0.0139%" height="15" fill="rgb(230,116,27)" fg:x="4696" fg:w="2"/><text x="32.9611%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.05%)</title><rect x="32.8295%" y="165" width="0.0488%" height="15" fill="rgb(228,99,48)" fg:x="4713" fg:w="7"/><text x="33.0795%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.01%)</title><rect x="32.8643%" y="149" width="0.0139%" height="15" fill="rgb(253,11,6)" fg:x="4718" fg:w="2"/><text x="33.1143%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::pad_formatted_parts (2 samples, 0.01%)</title><rect x="33.0315%" y="149" width="0.0139%" height="15" fill="rgb(247,143,39)" fg:x="4742" fg:w="2"/><text x="33.2815%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.01%)</title><rect x="33.1708%" y="69" width="0.0139%" height="15" fill="rgb(236,97,10)" fg:x="4762" fg:w="2"/><text x="33.4208%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.02%)</title><rect x="33.1917%" y="53" width="0.0209%" height="15" fill="rgb(233,208,19)" fg:x="4765" fg:w="3"/><text x="33.4417%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.21%)</title><rect x="33.2126%" y="53" width="0.2090%" height="15" fill="rgb(216,164,2)" fg:x="4768" fg:w="30"/><text x="33.4626%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.21%)</title><rect x="33.2126%" y="37" width="0.2090%" height="15" fill="rgb(220,129,5)" fg:x="4768" fg:w="30"/><text x="33.4626%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc (38 samples, 0.26%)</title><rect x="33.1638%" y="85" width="0.2647%" height="15" fill="rgb(242,17,10)" fg:x="4761" fg:w="38"/><text x="33.4138%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (35 samples, 0.24%)</title><rect x="33.1847%" y="69" width="0.2438%" height="15" fill="rgb(242,107,0)" fg:x="4764" fg:w="35"/><text x="33.4347%" y="79.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (42 samples, 0.29%)</title><rect x="33.1569%" y="101" width="0.2926%" height="15" fill="rgb(251,28,31)" fg:x="4760" fg:w="42"/><text x="33.4069%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="33.4355%" y="85" width="0.0139%" height="15" fill="rgb(233,223,10)" fg:x="4800" fg:w="2"/><text x="33.6855%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="33.4355%" y="69" width="0.0139%" height="15" fill="rgb(215,21,27)" fg:x="4800" fg:w="2"/><text x="33.6855%" y="79.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 0.33%)</title><rect x="33.1290%" y="117" width="0.3344%" height="15" fill="rgb(232,23,21)" fg:x="4756" fg:w="48"/><text x="33.3790%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="33.4494%" y="101" width="0.0139%" height="15" fill="rgb(244,5,23)" fg:x="4802" fg:w="2"/><text x="33.6994%" y="111.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="33.4634%" y="117" width="0.0139%" height="15" fill="rgb(226,81,46)" fg:x="4804" fg:w="2"/><text x="33.7134%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (65 samples, 0.45%)</title><rect x="33.0663%" y="133" width="0.4528%" height="15" fill="rgb(247,70,30)" fg:x="4747" fg:w="65"/><text x="33.3163%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.04%)</title><rect x="33.4773%" y="117" width="0.0418%" height="15" fill="rgb(212,68,19)" fg:x="4806" fg:w="6"/><text x="33.7273%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::write_formatted_parts (69 samples, 0.48%)</title><rect x="33.0454%" y="149" width="0.4806%" height="15" fill="rgb(240,187,13)" fg:x="4744" fg:w="69"/><text x="33.2954%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::fmt::format (190 samples, 1.32%)</title><rect x="32.7250%" y="197" width="1.3235%" height="15" fill="rgb(223,113,26)" fg:x="4698" fg:w="190"/><text x="32.9750%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::write (183 samples, 1.27%)</title><rect x="32.7738%" y="181" width="1.2747%" height="15" fill="rgb(206,192,2)" fg:x="4705" fg:w="183"/><text x="33.0238%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::float::float_to_decimal_common_exact (166 samples, 1.16%)</title><rect x="32.8922%" y="165" width="1.1563%" height="15" fill="rgb(241,108,4)" fg:x="4722" fg:w="166"/><text x="33.1422%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::num::flt2dec::strategy::grisu::format_exact_opt (75 samples, 0.52%)</title><rect x="33.5261%" y="149" width="0.5224%" height="15" fill="rgb(247,173,49)" fg:x="4813" fg:w="75"/><text x="33.7761%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (6 samples, 0.04%)</title><rect x="34.1948%" y="181" width="0.0418%" height="15" fill="rgb(224,114,35)" fg:x="4909" fg:w="6"/><text x="34.4448%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::num::dec2flt::dec2flt (36 samples, 0.25%)</title><rect x="34.0485%" y="197" width="0.2508%" height="15" fill="rgb(245,159,27)" fg:x="4888" fg:w="36"/><text x="34.2985%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::num::dec2flt::parse::parse_decimal (9 samples, 0.06%)</title><rect x="34.2366%" y="181" width="0.0627%" height="15" fill="rgb(245,172,44)" fg:x="4915" fg:w="9"/><text x="34.4866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.03%)</title><rect x="34.3132%" y="197" width="0.0348%" height="15" fill="rgb(236,23,11)" fg:x="4926" fg:w="5"/><text x="34.5632%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.11%)</title><rect x="34.3828%" y="181" width="0.1115%" height="15" fill="rgb(205,117,38)" fg:x="4936" fg:w="16"/><text x="34.6328%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.10%)</title><rect x="34.3968%" y="165" width="0.0975%" height="15" fill="rgb(237,72,25)" fg:x="4938" fg:w="14"/><text x="34.6468%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.15%)</title><rect x="34.3480%" y="197" width="0.1532%" height="15" fill="rgb(244,70,9)" fg:x="4931" fg:w="22"/><text x="34.5980%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::round_to_decimals (271 samples, 1.89%)</title><rect x="32.6832%" y="213" width="1.8877%" height="15" fill="rgb(217,125,39)" fg:x="4692" fg:w="271"/><text x="32.9332%" y="223.50">b..</text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.07%)</title><rect x="34.5013%" y="197" width="0.0697%" height="15" fill="rgb(235,36,10)" fg:x="4953" fg:w="10"/><text x="34.7513%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::text::fonts::LayoutJob as core::hash::Hash&gt;::hash (6 samples, 0.04%)</title><rect x="34.7868%" y="181" width="0.0418%" height="15" fill="rgb(251,123,47)" fg:x="4994" fg:w="6"/><text x="35.0368%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (21 samples, 0.15%)</title><rect x="34.8356%" y="181" width="0.1463%" height="15" fill="rgb(221,13,13)" fg:x="5001" fg:w="21"/><text x="35.0856%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="34.9610%" y="165" width="0.0209%" height="15" fill="rgb(238,131,9)" fg:x="5019" fg:w="3"/><text x="35.2110%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.07%)</title><rect x="34.9889%" y="181" width="0.0697%" height="15" fill="rgb(211,50,8)" fg:x="5023" fg:w="10"/><text x="35.2389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.04%)</title><rect x="35.0167%" y="165" width="0.0418%" height="15" fill="rgb(245,182,24)" fg:x="5027" fg:w="6"/><text x="35.2667%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.03%)</title><rect x="35.0306%" y="149" width="0.0279%" height="15" fill="rgb(242,14,37)" fg:x="5029" fg:w="4"/><text x="35.2806%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::GalleyCache::layout (65 samples, 0.45%)</title><rect x="34.6963%" y="197" width="0.4528%" height="15" fill="rgb(246,228,12)" fg:x="4981" fg:w="65"/><text x="34.9463%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.09%)</title><rect x="35.0585%" y="181" width="0.0906%" height="15" fill="rgb(213,55,15)" fg:x="5033" fg:w="13"/><text x="35.3085%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::Fonts::layout_single_line (84 samples, 0.59%)</title><rect x="34.5709%" y="213" width="0.5851%" height="15" fill="rgb(209,9,3)" fg:x="4963" fg:w="84"/><text x="34.8209%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.01%)</title><rect x="35.1560%" y="213" width="0.0139%" height="15" fill="rgb(230,59,30)" fg:x="5047" fg:w="2"/><text x="35.4060%" y="223.50"></text></g><g><title>libsystem_m.dylib`0x00007fff6b1acc70 (94 samples, 0.65%)</title><rect x="35.1700%" y="213" width="0.6548%" height="15" fill="rgb(209,121,21)" fg:x="5049" fg:w="94"/><text x="35.4200%" y="223.50"></text></g><g><title>libsystem_m.dylib`roundf (82 samples, 0.57%)</title><rect x="35.8247%" y="213" width="0.5712%" height="15" fill="rgb(220,109,13)" fg:x="5143" fg:w="82"/><text x="36.0747%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.01%)</title><rect x="36.3959%" y="213" width="0.0139%" height="15" fill="rgb(232,18,1)" fg:x="5225" fg:w="2"/><text x="36.6459%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::Plot as egui::widgets::Widget&gt;::ui (5,086 samples, 35.43%)</title><rect x="1.4419%" y="229" width="35.4277%" height="15" fill="rgb(215,41,42)" fg:x="207" fg:w="5086"/><text x="1.6919%" y="239.50">benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::Plot as e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (66 samples, 0.46%)</title><rect x="36.4099%" y="213" width="0.4597%" height="15" fill="rgb(224,123,36)" fg:x="5227" fg:w="66"/><text x="36.6599%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$round (6 samples, 0.04%)</title><rect x="36.8905%" y="229" width="0.0418%" height="15" fill="rgb(240,125,3)" fg:x="5296" fg:w="6"/><text x="37.1405%" y="239.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::base_offset (480 samples, 3.34%)</title><rect x="40.3594%" y="197" width="3.3435%" height="15" fill="rgb(205,98,50)" fg:x="5794" fg:w="480"/><text x="40.6094%" y="207.50">ben..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::new (61 samples, 0.42%)</title><rect x="43.7030%" y="197" width="0.4249%" height="15" fill="rgb(205,185,37)" fg:x="6274" fg:w="61"/><text x="43.9530%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.02%)</title><rect x="44.3717%" y="117" width="0.0209%" height="15" fill="rgb(238,207,15)" fg:x="6370" fg:w="3"/><text x="44.6217%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,076 samples, 7.50%)</title><rect x="36.9462%" y="213" width="7.4951%" height="15" fill="rgb(213,199,42)" fg:x="5304" fg:w="1076"/><text x="37.1962%" y="223.50">benchmark-..</text></g><g><title>libsystem_malloc.dylib`malloc (45 samples, 0.31%)</title><rect x="44.1279%" y="197" width="0.3135%" height="15" fill="rgb(235,201,11)" fg:x="6335" fg:w="45"/><text x="44.3779%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (44 samples, 0.31%)</title><rect x="44.1349%" y="181" width="0.3065%" height="15" fill="rgb(207,46,11)" fg:x="6336" fg:w="44"/><text x="44.3849%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.29%)</title><rect x="44.1558%" y="165" width="0.2856%" height="15" fill="rgb(241,35,35)" fg:x="6339" fg:w="41"/><text x="44.4058%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (39 samples, 0.27%)</title><rect x="44.1697%" y="149" width="0.2717%" height="15" fill="rgb(243,32,47)" fg:x="6341" fg:w="39"/><text x="44.4197%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (18 samples, 0.13%)</title><rect x="44.3160%" y="133" width="0.1254%" height="15" fill="rgb(247,202,23)" fg:x="6362" fg:w="18"/><text x="44.5660%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.05%)</title><rect x="44.3926%" y="117" width="0.0488%" height="15" fill="rgb(219,102,11)" fg:x="6373" fg:w="7"/><text x="44.6426%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Color32 as core::convert::From&lt;epaint::color::Rgba&gt;&gt;::from (21 samples, 0.15%)</title><rect x="44.4413%" y="213" width="0.1463%" height="15" fill="rgb(243,110,44)" fg:x="6380" fg:w="21"/><text x="44.6913%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Rgba as core::convert::From&lt;epaint::color::Hsva&gt;&gt;::from (13 samples, 0.09%)</title><rect x="44.8732%" y="181" width="0.0906%" height="15" fill="rgb(222,74,54)" fg:x="6442" fg:w="13"/><text x="45.1232%" y="191.50"></text></g><g><title>libsystem_m.dylib`floorf (2 samples, 0.01%)</title><rect x="44.9707%" y="181" width="0.0139%" height="15" fill="rgb(216,99,12)" fg:x="6456" fg:w="2"/><text x="45.2207%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Color32 as core::convert::From&lt;epaint::color::Hsva&gt;&gt;::from (17 samples, 0.12%)</title><rect x="44.8732%" y="197" width="0.1184%" height="15" fill="rgb(226,22,26)" fg:x="6442" fg:w="17"/><text x="45.1232%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Color32 as core::convert::From&lt;epaint::color::Rgba&gt;&gt;::from (1,168 samples, 8.14%)</title><rect x="44.9916%" y="197" width="8.1360%" height="15" fill="rgb(217,163,10)" fg:x="6459" fg:w="1168"/><text x="45.2416%" y="207.50">benchmark-0..</text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$powf (48 samples, 0.33%)</title><rect x="53.1346%" y="197" width="0.3344%" height="15" fill="rgb(213,25,53)" fg:x="7628" fg:w="48"/><text x="53.3846%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$roundf (66 samples, 0.46%)</title><rect x="53.4689%" y="197" width="0.4597%" height="15" fill="rgb(252,105,26)" fg:x="7676" fg:w="66"/><text x="53.7189%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="53.9496%" y="117" width="0.0209%" height="15" fill="rgb(220,39,43)" fg:x="7745" fg:w="3"/><text x="54.1996%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="53.9565%" y="101" width="0.0139%" height="15" fill="rgb(229,68,48)" fg:x="7746" fg:w="2"/><text x="54.2065%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.05%)</title><rect x="53.9287%" y="149" width="0.0488%" height="15" fill="rgb(252,8,32)" fg:x="7742" fg:w="7"/><text x="54.1787%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.05%)</title><rect x="53.9287%" y="133" width="0.0488%" height="15" fill="rgb(223,20,43)" fg:x="7742" fg:w="7"/><text x="54.1787%" y="143.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.06%)</title><rect x="53.9287%" y="197" width="0.0557%" height="15" fill="rgb(229,81,49)" fg:x="7742" fg:w="8"/><text x="54.1787%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="53.9287%" y="181" width="0.0557%" height="15" fill="rgb(236,28,36)" fg:x="7742" fg:w="8"/><text x="54.1787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.06%)</title><rect x="53.9287%" y="165" width="0.0557%" height="15" fill="rgb(249,185,26)" fg:x="7742" fg:w="8"/><text x="54.1787%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::color::Color32::linear_multiply (233 samples, 1.62%)</title><rect x="53.9844%" y="197" width="1.6230%" height="15" fill="rgb(249,174,33)" fg:x="7750" fg:w="233"/><text x="54.2344%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007fff6b1acc70 (4,031 samples, 28.08%)</title><rect x="55.6144%" y="197" width="28.0789%" height="15" fill="rgb(233,201,37)" fg:x="7984" fg:w="4031"/><text x="55.8644%" y="207.50">libsystem_m.dylib`0x00007fff6b1acc70</text></g><g><title>libsystem_m.dylib`roundf (566 samples, 3.94%)</title><rect x="83.6932%" y="197" width="3.9426%" height="15" fill="rgb(221,78,26)" fg:x="12015" fg:w="566"/><text x="83.9432%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.05%)</title><rect x="87.6567%" y="165" width="0.0488%" height="15" fill="rgb(250,127,30)" fg:x="12584" fg:w="7"/><text x="87.9067%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (46 samples, 0.32%)</title><rect x="87.6358%" y="197" width="0.3204%" height="15" fill="rgb(230,49,44)" fg:x="12581" fg:w="46"/><text x="87.8858%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (45 samples, 0.31%)</title><rect x="87.6428%" y="181" width="0.3135%" height="15" fill="rgb(229,67,23)" fg:x="12582" fg:w="45"/><text x="87.8928%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.25%)</title><rect x="87.7055%" y="165" width="0.2508%" height="15" fill="rgb(249,83,47)" fg:x="12591" fg:w="36"/><text x="87.9555%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.24%)</title><rect x="87.7125%" y="149" width="0.2438%" height="15" fill="rgb(215,43,3)" fg:x="12592" fg:w="35"/><text x="87.9625%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.10%)</title><rect x="87.8587%" y="133" width="0.0975%" height="15" fill="rgb(238,154,13)" fg:x="12613" fg:w="14"/><text x="88.1087%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="87.9423%" y="117" width="0.0139%" height="15" fill="rgb(219,56,2)" fg:x="12625" fg:w="2"/><text x="88.1923%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::Plot::barchart (6,296 samples, 43.86%)</title><rect x="44.5876%" y="213" width="43.8562%" height="15" fill="rgb(233,0,4)" fg:x="6401" fg:w="6296"/><text x="44.8376%" y="223.50">benchmark-022a91b58b3cfee0`egui::widgets::plot::Plot::barchart</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (70 samples, 0.49%)</title><rect x="87.9563%" y="197" width="0.4876%" height="15" fill="rgb(235,30,7)" fg:x="12627" fg:w="70"/><text x="88.2063%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::base_offset (12 samples, 0.08%)</title><rect x="88.4508%" y="213" width="0.0836%" height="15" fill="rgb(250,79,13)" fg:x="12698" fg:w="12"/><text x="88.7008%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::new (9 samples, 0.06%)</title><rect x="88.5344%" y="213" width="0.0627%" height="15" fill="rgb(211,146,34)" fg:x="12710" fg:w="9"/><text x="88.7844%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::color::Color32::linear_multiply (17 samples, 0.12%)</title><rect x="88.5971%" y="213" width="0.1184%" height="15" fill="rgb(228,22,38)" fg:x="12719" fg:w="17"/><text x="88.8471%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`benchmark::criterion_benchmark::bars_plot (7,440 samples, 51.83%)</title><rect x="36.9323%" y="229" width="51.8250%" height="15" fill="rgb(235,168,5)" fg:x="5302" fg:w="7440"/><text x="37.1823%" y="239.50">benchmark-022a91b58b3cfee0`benchmark::criterion_benchmark::bars_plot</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="88.7225%" y="213" width="0.0348%" height="15" fill="rgb(221,155,16)" fg:x="12737" fg:w="5"/><text x="88.9725%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::containers::frame::Prepared::end (2 samples, 0.01%)</title><rect x="88.7643%" y="229" width="0.0139%" height="15" fill="rgb(215,215,53)" fg:x="12743" fg:w="2"/><text x="89.0143%" y="239.50"></text></g><g><title>libsystem_m.dylib`floor (7 samples, 0.05%)</title><rect x="88.7852%" y="229" width="0.0488%" height="15" fill="rgb(223,4,10)" fg:x="12746" fg:w="7"/><text x="89.0352%" y="239.50"></text></g><g><title>libsystem_m.dylib`round (14 samples, 0.10%)</title><rect x="88.8339%" y="229" width="0.0975%" height="15" fill="rgb(234,103,6)" fg:x="12753" fg:w="14"/><text x="89.0839%" y="239.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::containers::frame::Frame::show (12,569 samples, 87.55%)</title><rect x="1.4280%" y="245" width="87.5522%" height="15" fill="rgb(227,97,0)" fg:x="205" fg:w="12569"/><text x="1.6780%" y="255.50">benchmark-022a91b58b3cfee0`egui::containers::frame::Frame::show</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.05%)</title><rect x="88.9315%" y="229" width="0.0488%" height="15" fill="rgb(234,150,53)" fg:x="12767" fg:w="7"/><text x="89.1815%" y="239.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::containers::panel::CentralPanel::show (12,570 samples, 87.56%)</title><rect x="1.4280%" y="261" width="87.5592%" height="15" fill="rgb(228,201,54)" fg:x="205" fg:w="12570"/><text x="1.6780%" y="271.50">benchmark-022a91b58b3cfee0`egui::containers::panel::CentralPanel::show</text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$memmove (12 samples, 0.08%)</title><rect x="88.9872%" y="245" width="0.0836%" height="15" fill="rgb(222,22,37)" fg:x="12775" fg:w="12"/><text x="89.2372%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::layers::GraphicLayers::drain (370 samples, 2.58%)</title><rect x="89.0708%" y="245" width="2.5773%" height="15" fill="rgb(237,53,32)" fg:x="12787" fg:w="370"/><text x="89.3208%" y="255.50">be..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (304 samples, 2.12%)</title><rect x="89.5305%" y="229" width="2.1176%" height="15" fill="rgb(233,25,53)" fg:x="12853" fg:w="304"/><text x="89.7805%" y="239.50">l..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::Context::end_frame (437 samples, 3.04%)</title><rect x="88.9872%" y="261" width="3.0440%" height="15" fill="rgb(210,40,34)" fg:x="12775" fg:w="437"/><text x="89.2372%" y="271.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.38%)</title><rect x="91.6551%" y="245" width="0.3761%" height="15" fill="rgb(241,220,44)" fg:x="13158" fg:w="54"/><text x="91.9051%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::input_state::InputState as core::default::Default&gt;::default (3 samples, 0.02%)</title><rect x="92.0382%" y="245" width="0.0209%" height="15" fill="rgb(235,28,35)" fg:x="13213" fg:w="3"/><text x="92.2882%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="92.0451%" y="229" width="0.0139%" height="15" fill="rgb(210,56,17)" fg:x="13214" fg:w="2"/><text x="92.2951%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="92.0451%" y="213" width="0.0139%" height="15" fill="rgb(224,130,29)" fg:x="13214" fg:w="2"/><text x="92.2951%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.01%)</title><rect x="92.0451%" y="197" width="0.0139%" height="15" fill="rgb(235,212,8)" fg:x="13214" fg:w="2"/><text x="92.2951%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.01%)</title><rect x="92.0591%" y="245" width="0.0139%" height="15" fill="rgb(223,33,50)" fg:x="13216" fg:w="2"/><text x="92.3091%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;egui::input_state::InputState&gt; (2 samples, 0.01%)</title><rect x="92.0591%" y="229" width="0.0139%" height="15" fill="rgb(219,149,13)" fg:x="13216" fg:w="2"/><text x="92.3091%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="92.0869%" y="229" width="0.0139%" height="15" fill="rgb(250,156,29)" fg:x="13220" fg:w="2"/><text x="92.3369%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="92.0869%" y="213" width="0.0139%" height="15" fill="rgb(216,193,19)" fg:x="13220" fg:w="2"/><text x="92.3369%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.01%)</title><rect x="92.0869%" y="197" width="0.0139%" height="15" fill="rgb(216,135,14)" fg:x="13220" fg:w="2"/><text x="92.3369%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::input_state::InputState::begin_frame (4 samples, 0.03%)</title><rect x="92.0800%" y="245" width="0.0279%" height="15" fill="rgb(241,47,5)" fg:x="13219" fg:w="4"/><text x="92.3300%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::memory::Areas::set_state (2 samples, 0.01%)</title><rect x="92.1078%" y="245" width="0.0139%" height="15" fill="rgb(233,42,35)" fg:x="13223" fg:w="2"/><text x="92.3578%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.01%)</title><rect x="92.1078%" y="229" width="0.0139%" height="15" fill="rgb(231,13,6)" fg:x="13223" fg:w="2"/><text x="92.3578%" y="239.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::CtxRef::begin_frame (14 samples, 0.10%)</title><rect x="92.0312%" y="261" width="0.0975%" height="15" fill="rgb(207,181,40)" fg:x="13212" fg:w="14"/><text x="92.2812%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,225 samples, 92.12%)</title><rect x="0.0139%" y="293" width="92.1218%" height="15" fill="rgb(254,173,49)" fg:x="2" fg:w="13225"/><text x="0.2639%" y="303.50">benchmark-022a91b58b3cfee0`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>benchmark-022a91b58b3cfee0`criterion::bencher::Bencher&lt;M&gt;::iter (13,225 samples, 92.12%)</title><rect x="0.0139%" y="277" width="92.1218%" height="15" fill="rgb(221,1,38)" fg:x="2" fg:w="13225"/><text x="0.2639%" y="287.50">benchmark-022a91b58b3cfee0`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;(egui::data::output::Output,alloc::vec::Vec&lt;epaint::ClippedShape&gt;)&gt; (16 samples, 0.11%)</title><rect x="92.1357%" y="261" width="0.1115%" height="15" fill="rgb(206,124,46)" fg:x="13227" fg:w="16"/><text x="92.3857%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;epaint::shape::Shape&gt; (14 samples, 0.10%)</title><rect x="92.1496%" y="245" width="0.0975%" height="15" fill="rgb(249,21,11)" fg:x="13229" fg:w="14"/><text x="92.3996%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;epaint::shape::Shape&gt; (4 samples, 0.03%)</title><rect x="92.2471%" y="261" width="0.0279%" height="15" fill="rgb(222,201,40)" fg:x="13243" fg:w="4"/><text x="92.4971%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::find_closest_element (82 samples, 0.57%)</title><rect x="92.4561%" y="213" width="0.5712%" height="15" fill="rgb(235,61,29)" fg:x="13273" fg:w="82"/><text x="92.7061%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (23 samples, 0.16%)</title><rect x="92.8671%" y="197" width="0.1602%" height="15" fill="rgb(219,207,3)" fg:x="13332" fg:w="23"/><text x="93.1171%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::get_bounds (21 samples, 0.15%)</title><rect x="93.0273%" y="213" width="0.1463%" height="15" fill="rgb(222,56,46)" fg:x="13355" fg:w="21"/><text x="93.2773%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="93.7169%" y="165" width="0.0139%" height="15" fill="rgb(239,76,54)" fg:x="13454" fg:w="2"/><text x="93.9669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="93.7169%" y="149" width="0.0139%" height="15" fill="rgb(231,124,27)" fg:x="13454" fg:w="2"/><text x="93.9669%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.02%)</title><rect x="93.7169%" y="181" width="0.0209%" height="15" fill="rgb(249,195,6)" fg:x="13454" fg:w="3"/><text x="93.9669%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (32 samples, 0.22%)</title><rect x="93.7378%" y="181" width="0.2229%" height="15" fill="rgb(237,174,47)" fg:x="13457" fg:w="32"/><text x="93.9878%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::shapes (150 samples, 1.04%)</title><rect x="93.1806%" y="197" width="1.0449%" height="15" fill="rgb(206,201,31)" fg:x="13377" fg:w="150"/><text x="93.4306%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.26%)</title><rect x="93.9607%" y="181" width="0.2647%" height="15" fill="rgb(231,57,52)" fg:x="13489" fg:w="38"/><text x="94.2107%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::items::BarChart as egui::widgets::plot::items::PlotItem&gt;::get_shapes (155 samples, 1.08%)</title><rect x="93.1736%" y="213" width="1.0797%" height="15" fill="rgb(248,177,22)" fg:x="13376" fg:w="155"/><text x="93.4236%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.03%)</title><rect x="94.2254%" y="197" width="0.0279%" height="15" fill="rgb(215,211,37)" fg:x="13527" fg:w="4"/><text x="94.4754%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Color32 as core::convert::From&lt;epaint::color::Rgba&gt;&gt;::from (12 samples, 0.08%)</title><rect x="94.2533%" y="213" width="0.0836%" height="15" fill="rgb(241,128,51)" fg:x="13531" fg:w="12"/><text x="94.5033%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="94.3438%" y="213" width="0.0139%" height="15" fill="rgb(227,165,31)" fg:x="13544" fg:w="2"/><text x="94.5938%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::slice::merge_sort (2 samples, 0.01%)</title><rect x="94.3578%" y="213" width="0.0139%" height="15" fill="rgb(228,167,24)" fg:x="13546" fg:w="2"/><text x="94.6078%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::vec::Vec&lt;T,A&gt;::retain (3 samples, 0.02%)</title><rect x="94.3717%" y="213" width="0.0209%" height="15" fill="rgb(228,143,12)" fg:x="13548" fg:w="3"/><text x="94.6217%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.01%)</title><rect x="94.3787%" y="197" width="0.0139%" height="15" fill="rgb(249,149,8)" fg:x="13549" fg:w="2"/><text x="94.6287%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::write_formatted_parts (4 samples, 0.03%)</title><rect x="94.4065%" y="181" width="0.0279%" height="15" fill="rgb(243,35,44)" fg:x="13553" fg:w="4"/><text x="94.6565%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.02%)</title><rect x="94.4135%" y="165" width="0.0209%" height="15" fill="rgb(246,89,9)" fg:x="13554" fg:w="3"/><text x="94.6635%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::write (8 samples, 0.06%)</title><rect x="94.3926%" y="213" width="0.0557%" height="15" fill="rgb(233,213,13)" fg:x="13551" fg:w="8"/><text x="94.6426%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::float::float_to_decimal_common_shortest (8 samples, 0.06%)</title><rect x="94.3926%" y="197" width="0.0557%" height="15" fill="rgb(233,141,41)" fg:x="13551" fg:w="8"/><text x="94.6426%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::num::flt2dec::strategy::grisu::format_shortest_opt (2 samples, 0.01%)</title><rect x="94.4344%" y="181" width="0.0139%" height="15" fill="rgb(239,167,4)" fg:x="13557" fg:w="2"/><text x="94.6844%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;egui::widgets::plot::items::BarChart&gt; (6 samples, 0.04%)</title><rect x="94.4483%" y="197" width="0.0418%" height="15" fill="rgb(209,217,16)" fg:x="13559" fg:w="6"/><text x="94.6983%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="94.4971%" y="197" width="0.0139%" height="15" fill="rgb(219,88,35)" fg:x="13566" fg:w="2"/><text x="94.7471%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="94.4971%" y="181" width="0.0139%" height="15" fill="rgb(220,193,23)" fg:x="13566" fg:w="2"/><text x="94.7471%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::ptr::drop_in_place&lt;egui::widgets::plot::Prepared&gt; (10 samples, 0.07%)</title><rect x="94.4483%" y="213" width="0.0697%" height="15" fill="rgb(230,90,52)" fg:x="13559" fg:w="10"/><text x="94.6983%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::painter::Painter::extend (85 samples, 0.59%)</title><rect x="94.5180%" y="213" width="0.5921%" height="15" fill="rgb(252,106,19)" fg:x="13569" fg:w="85"/><text x="94.7680%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::layers::PaintList::extend (85 samples, 0.59%)</title><rect x="94.5180%" y="197" width="0.5921%" height="15" fill="rgb(206,74,20)" fg:x="13569" fg:w="85"/><text x="94.7680%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (85 samples, 0.59%)</title><rect x="94.5180%" y="181" width="0.5921%" height="15" fill="rgb(230,138,44)" fg:x="13569" fg:w="85"/><text x="94.7680%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::rect::Rect::extend_with (5 samples, 0.03%)</title><rect x="95.1170%" y="213" width="0.0348%" height="15" fill="rgb(235,182,43)" fg:x="13655" fg:w="5"/><text x="95.3670%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::Formatter::write_formatted_parts (2 samples, 0.01%)</title><rect x="95.1728%" y="149" width="0.0139%" height="15" fill="rgb(242,16,51)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.01%)</title><rect x="95.1728%" y="133" width="0.0139%" height="15" fill="rgb(248,9,4)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="143.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="95.1728%" y="117" width="0.0139%" height="15" fill="rgb(210,31,22)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="127.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="95.1728%" y="101" width="0.0139%" height="15" fill="rgb(239,54,39)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.01%)</title><rect x="95.1728%" y="85" width="0.0139%" height="15" fill="rgb(230,99,41)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.01%)</title><rect x="95.1728%" y="69" width="0.0139%" height="15" fill="rgb(253,106,12)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="95.1728%" y="53" width="0.0139%" height="15" fill="rgb(213,46,41)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="95.1728%" y="37" width="0.0139%" height="15" fill="rgb(215,133,35)" fg:x="13663" fg:w="2"/><text x="95.4228%" y="47.50"></text></g><g><title>benchmark-022a91b58b3cfee0`alloc::fmt::format (13 samples, 0.09%)</title><rect x="95.1519%" y="197" width="0.0906%" height="15" fill="rgb(213,28,5)" fg:x="13660" fg:w="13"/><text x="95.4019%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::write (12 samples, 0.08%)</title><rect x="95.1588%" y="181" width="0.0836%" height="15" fill="rgb(215,77,49)" fg:x="13661" fg:w="12"/><text x="95.4088%" y="191.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::fmt::float::float_to_decimal_common_exact (11 samples, 0.08%)</title><rect x="95.1658%" y="165" width="0.0766%" height="15" fill="rgb(248,100,22)" fg:x="13662" fg:w="11"/><text x="95.4158%" y="175.50"></text></g><g><title>benchmark-022a91b58b3cfee0`core::num::flt2dec::strategy::grisu::format_exact_opt (8 samples, 0.06%)</title><rect x="95.1867%" y="149" width="0.0557%" height="15" fill="rgb(208,67,9)" fg:x="13665" fg:w="8"/><text x="95.4367%" y="159.50"></text></g><g><title>benchmark-022a91b58b3cfee0`emath::round_to_decimals (14 samples, 0.10%)</title><rect x="95.1519%" y="213" width="0.0975%" height="15" fill="rgb(219,133,21)" fg:x="13660" fg:w="14"/><text x="95.4019%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::Fonts::layout_single_line (4 samples, 0.03%)</title><rect x="95.2494%" y="213" width="0.0279%" height="15" fill="rgb(246,46,29)" fg:x="13674" fg:w="4"/><text x="95.4994%" y="223.50"></text></g><g><title>libsystem_m.dylib`0x00007fff6b1acc70 (6 samples, 0.04%)</title><rect x="95.2772%" y="213" width="0.0418%" height="15" fill="rgb(246,185,52)" fg:x="13678" fg:w="6"/><text x="95.5272%" y="223.50"></text></g><g><title>libsystem_m.dylib`roundf (7 samples, 0.05%)</title><rect x="95.3190%" y="213" width="0.0488%" height="15" fill="rgb(252,136,11)" fg:x="13684" fg:w="7"/><text x="95.5690%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;egui::widgets::plot::Plot as egui::widgets::Widget&gt;::ui (452 samples, 3.15%)</title><rect x="92.2750%" y="229" width="3.1485%" height="15" fill="rgb(219,138,53)" fg:x="13247" fg:w="452"/><text x="92.5250%" y="239.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.06%)</title><rect x="95.3678%" y="213" width="0.0557%" height="15" fill="rgb(211,51,23)" fg:x="13691" fg:w="8"/><text x="95.6178%" y="223.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::base_offset (37 samples, 0.26%)</title><rect x="95.7091%" y="197" width="0.2577%" height="15" fill="rgb(247,221,28)" fg:x="13740" fg:w="37"/><text x="95.9591%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::items::Bar::new (4 samples, 0.03%)</title><rect x="95.9668%" y="197" width="0.0279%" height="15" fill="rgb(251,222,45)" fg:x="13777" fg:w="4"/><text x="96.2168%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (89 samples, 0.62%)</title><rect x="95.4235%" y="213" width="0.6199%" height="15" fill="rgb(217,162,53)" fg:x="13699" fg:w="89"/><text x="95.6735%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.05%)</title><rect x="95.9947%" y="197" width="0.0488%" height="15" fill="rgb(229,93,14)" fg:x="13781" fg:w="7"/><text x="96.2447%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.03%)</title><rect x="96.0086%" y="181" width="0.0348%" height="15" fill="rgb(209,67,49)" fg:x="13783" fg:w="5"/><text x="96.2586%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.03%)</title><rect x="96.0086%" y="165" width="0.0348%" height="15" fill="rgb(213,87,29)" fg:x="13783" fg:w="5"/><text x="96.2586%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.03%)</title><rect x="96.0086%" y="149" width="0.0348%" height="15" fill="rgb(205,151,52)" fg:x="13783" fg:w="5"/><text x="96.2586%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.02%)</title><rect x="96.0226%" y="133" width="0.0209%" height="15" fill="rgb(253,215,39)" fg:x="13785" fg:w="3"/><text x="96.2726%" y="143.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;epaint::color::Color32 as core::convert::From&lt;epaint::color::Rgba&gt;&gt;::from (84 samples, 0.59%)</title><rect x="96.0713%" y="197" width="0.5851%" height="15" fill="rgb(221,220,41)" fg:x="13792" fg:w="84"/><text x="96.3213%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$powf (3 samples, 0.02%)</title><rect x="96.6565%" y="197" width="0.0209%" height="15" fill="rgb(218,133,21)" fg:x="13876" fg:w="3"/><text x="96.9065%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`DYLD-STUB$$roundf (6 samples, 0.04%)</title><rect x="96.6773%" y="197" width="0.0418%" height="15" fill="rgb(221,193,43)" fg:x="13879" fg:w="6"/><text x="96.9273%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::color::Color32::linear_multiply (21 samples, 0.15%)</title><rect x="96.7191%" y="197" width="0.1463%" height="15" fill="rgb(240,128,52)" fg:x="13885" fg:w="21"/><text x="96.9691%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007fff6b1acc70 (334 samples, 2.33%)</title><rect x="96.8654%" y="197" width="2.3266%" height="15" fill="rgb(253,114,12)" fg:x="13906" fg:w="334"/><text x="97.1154%" y="207.50">l..</text></g><g><title>libsystem_m.dylib`roundf (45 samples, 0.31%)</title><rect x="99.1920%" y="197" width="0.3135%" height="15" fill="rgb(215,223,47)" fg:x="14240" fg:w="45"/><text x="99.4420%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.02%)</title><rect x="99.5054%" y="197" width="0.0209%" height="15" fill="rgb(248,225,23)" fg:x="14285" fg:w="3"/><text x="99.7554%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.5054%" y="181" width="0.0209%" height="15" fill="rgb(250,108,0)" fg:x="14285" fg:w="3"/><text x="99.7554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="99.5054%" y="165" width="0.0209%" height="15" fill="rgb(228,208,7)" fg:x="14285" fg:w="3"/><text x="99.7554%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="99.5054%" y="149" width="0.0209%" height="15" fill="rgb(244,45,10)" fg:x="14285" fg:w="3"/><text x="99.7554%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="99.5124%" y="133" width="0.0139%" height="15" fill="rgb(207,125,25)" fg:x="14286" fg:w="2"/><text x="99.7624%" y="143.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::widgets::plot::Plot::barchart (508 samples, 3.54%)</title><rect x="96.0435%" y="213" width="3.5386%" height="15" fill="rgb(210,195,18)" fg:x="13788" fg:w="508"/><text x="96.2935%" y="223.50">ben..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.06%)</title><rect x="99.5263%" y="197" width="0.0557%" height="15" fill="rgb(249,80,12)" fg:x="14288" fg:w="8"/><text x="99.7763%" y="207.50"></text></g><g><title>benchmark-022a91b58b3cfee0`benchmark::criterion_benchmark::bars_plot (600 samples, 4.18%)</title><rect x="95.4235%" y="229" width="4.1794%" height="15" fill="rgb(221,65,9)" fg:x="13699" fg:w="600"/><text x="95.6735%" y="239.50">bench..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::containers::frame::Frame::show (1,054 samples, 7.34%)</title><rect x="92.2750%" y="245" width="7.3419%" height="15" fill="rgb(235,49,36)" fg:x="13247" fg:w="1054"/><text x="92.5250%" y="255.50">benchmark-..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::containers::panel::CentralPanel::show (1,055 samples, 7.35%)</title><rect x="92.2750%" y="261" width="7.3488%" height="15" fill="rgb(225,32,20)" fg:x="13247" fg:w="1055"/><text x="92.5250%" y="271.50">benchmark-..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::layers::GraphicLayers::drain (40 samples, 0.28%)</title><rect x="99.6239%" y="245" width="0.2786%" height="15" fill="rgb(215,141,46)" fg:x="14302" fg:w="40"/><text x="99.8739%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (35 samples, 0.24%)</title><rect x="99.6587%" y="229" width="0.2438%" height="15" fill="rgb(250,160,47)" fg:x="14307" fg:w="35"/><text x="99.9087%" y="239.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::Context::end_frame (44 samples, 0.31%)</title><rect x="99.6239%" y="261" width="0.3065%" height="15" fill="rgb(216,222,40)" fg:x="14302" fg:w="44"/><text x="99.8739%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="99.9094%" y="245" width="0.0209%" height="15" fill="rgb(234,217,39)" fg:x="14343" fg:w="3"/><text x="100.1594%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::input_state::InputState::begin_frame (2 samples, 0.01%)</title><rect x="99.9303%" y="245" width="0.0139%" height="15" fill="rgb(207,178,40)" fg:x="14346" fg:w="2"/><text x="100.1803%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (14,347 samples, 99.94%)</title><rect x="0.0139%" y="325" width="99.9373%" height="15" fill="rgb(221,136,13)" fg:x="2" fg:w="14347"/><text x="0.2639%" y="335.50">benchmark-022a91b58b3cfee0`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>benchmark-022a91b58b3cfee0`criterion::routine::Routine::profile (14,347 samples, 99.94%)</title><rect x="0.0139%" y="309" width="99.9373%" height="15" fill="rgb(249,199,10)" fg:x="2" fg:w="14347"/><text x="0.2639%" y="319.50">benchmark-022a91b58b3cfee0`criterion::routine::Routine::profile</text></g><g><title>benchmark-022a91b58b3cfee0`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (1,122 samples, 7.82%)</title><rect x="92.1357%" y="293" width="7.8155%" height="15" fill="rgb(249,222,13)" fg:x="13227" fg:w="1122"/><text x="92.3857%" y="303.50">benchmark-0..</text></g><g><title>benchmark-022a91b58b3cfee0`criterion::bencher::Bencher&lt;M&gt;::iter (1,122 samples, 7.82%)</title><rect x="92.1357%" y="277" width="7.8155%" height="15" fill="rgb(244,185,38)" fg:x="13227" fg:w="1122"/><text x="92.3857%" y="287.50">benchmark-0..</text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::CtxRef::begin_frame (3 samples, 0.02%)</title><rect x="99.9303%" y="261" width="0.0209%" height="15" fill="rgb(236,202,9)" fg:x="14346" fg:w="3"/><text x="100.1803%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`egui::context::CtxRef::begin_frame (2 samples, 0.01%)</title><rect x="99.9512%" y="325" width="0.0139%" height="15" fill="rgb(250,229,37)" fg:x="14349" fg:w="2"/><text x="100.2012%" y="335.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::fonts::Fonts::from_definitions (2 samples, 0.01%)</title><rect x="99.9512%" y="309" width="0.0139%" height="15" fill="rgb(206,174,23)" fg:x="14349" fg:w="2"/><text x="100.2012%" y="319.50"></text></g><g><title>benchmark-022a91b58b3cfee0`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="99.9512%" y="293" width="0.0139%" height="15" fill="rgb(211,33,43)" fg:x="14349" fg:w="2"/><text x="100.2012%" y="303.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::font::Font::new (2 samples, 0.01%)</title><rect x="99.9512%" y="277" width="0.0139%" height="15" fill="rgb(245,58,50)" fg:x="14349" fg:w="2"/><text x="100.2012%" y="287.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::font::Font::glyph_info (2 samples, 0.01%)</title><rect x="99.9512%" y="261" width="0.0139%" height="15" fill="rgb(244,68,36)" fg:x="14349" fg:w="2"/><text x="100.2012%" y="271.50"></text></g><g><title>benchmark-022a91b58b3cfee0`epaint::text::font::Font::glyph_info_no_cache_or_fallback (2 samples, 0.01%)</title><rect x="99.9512%" y="245" width="0.0139%" height="15" fill="rgb(232,229,15)" fg:x="14349" fg:w="2"/><text x="100.2012%" y="255.50"></text></g><g><title>benchmark-022a91b58b3cfee0`main (14,354 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9861%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="14354"/><text x="0.2500%" y="415.50">benchmark-022a91b58b3cfee0`main</text></g><g><title>benchmark-022a91b58b3cfee0`std::rt::lang_start_internal (14,353 samples, 99.98%)</title><rect x="0.0070%" y="389" width="99.9791%" height="15" fill="rgb(235,160,14)" fg:x="1" fg:w="14353"/><text x="0.2570%" y="399.50">benchmark-022a91b58b3cfee0`std::rt::lang_start_internal</text></g><g><title>benchmark-022a91b58b3cfee0`std::rt::lang_start::_{{closure}} (14,353 samples, 99.98%)</title><rect x="0.0070%" y="373" width="99.9791%" height="15" fill="rgb(212,155,44)" fg:x="1" fg:w="14353"/><text x="0.2570%" y="383.50">benchmark-022a91b58b3cfee0`std::rt::lang_start::_{{closure}}</text></g><g><title>benchmark-022a91b58b3cfee0`std::sys_common::backtrace::__rust_begin_short_backtrace (14,353 samples, 99.98%)</title><rect x="0.0070%" y="357" width="99.9791%" height="15" fill="rgb(226,2,50)" fg:x="1" fg:w="14353"/><text x="0.2570%" y="367.50">benchmark-022a91b58b3cfee0`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>benchmark-022a91b58b3cfee0`benchmark::main (14,353 samples, 99.98%)</title><rect x="0.0070%" y="341" width="99.9791%" height="15" fill="rgb(234,177,6)" fg:x="1" fg:w="14353"/><text x="0.2570%" y="351.50">benchmark-022a91b58b3cfee0`benchmark::main</text></g><g><title>all (14,356 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="14356"/><text x="0.2500%" y="463.50"></text></g><g><title>benchmark-022a91b58b3cfee0`0x5 (14,356 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="14356"/><text x="0.2500%" y="447.50">benchmark-022a91b58b3cfee0`0x5</text></g><g><title>libdyld.dylib`start (14,356 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="14356"/><text x="0.2500%" y="431.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.01%)</title><rect x="99.9861%" y="405" width="0.0139%" height="15" fill="rgb(222,198,25)" fg:x="14354" fg:w="2"/><text x="100.2361%" y="415.50"></text></g></svg></svg>